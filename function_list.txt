//Function variables (to have values added later)
    reg[7:0] sbox[15:0];
    reg[7:0] sbox_i[15:0];
    reg[7:0] rcon[15:0];
    
    //Function definition zone
    //---------------------------------------------------------------
    function addKey();
        input[7:0] state[15:0];
        input[7:0] roundKey[15:0];
        reg[7:0] i = 0;
        begin
            if (i < 128) begin
                state[i] = state[i] ^ roundKey[i];
                i = i + 1;
            end
        end
    endfunction
    
    function subBytes();
    // Use the sbox module to get the values out and easily collected
    //  The initialisation is: sbox name(inversion?, location, output)
        input[7:0] state[15:0];
        input inv;
        reg[7:0] i = 0;
        begin
            if (i < 128) begin
                if (inv) begin
                    state[i] = sbox_i[state[i]];
                end
                else begin
                    state[i] = sbox[state[i]];
                end
                i = i + 1;
            end
        end
    endfunction
    
    function [7:0]rotate (); // A simple bit shifter to the left right
        input[7:0] element;
        input[3:0] i;
        reg [15:0] tmp;
        begin
            tmp = {element, element} >> i;
            rotate = tmp[7:0];
        end
    endfunction
        
    function shiftRow;
        input inv;
        integer f,j,t;
        integer c;
        begin
            c = 1;
            for (f = 0; f < 4; f = f + 1)
                begin
                    if (inv == 1) begin
                        while (c < f) begin
                            t = arr[f*4];
                            arr[(f*4) + 0] = arr[(f*4) + 1];
                            arr[(f*4) + 1] = arr[(f*4) + 2];
                            arr[(f*4) + 2] = arr[(f*4) + 3];
                            arr[(f*4) + 3] = t;
                            c = c + 1;
                        end
                        c = 0;
                    end else begin
                        for (j = 0;j < 3 ;j = j + 1 ) begin
                            while (c < f) begin
                            t = arr[f*4];
                            arr[(f*4) + 0] = arr[(f*4) + 1];
                            arr[(f*4) + 1] = arr[(f*4) + 2];
                            arr[(f*4) + 2] = arr[(f*4) + 3];
                            arr[(f*4) + 3] = t;
                            c = c + 1;
                        end
                        c = 0;
                        end
                    end
                end
        end
    endfunction
    
    function[7:0] keySchedule();
        input[7:0] element;
        input[3:0] i;
        begin
            element = rotate(element, 1);
            keySchedule = sbox[element]; //Possible incorrect. Do check.
            keySchedule = keySchedule ^ rcon[i];
        end
    endfunction
    
    //TO-DO: Expand Key, createRoundKey
    
    function [7:0]galois;
        input[7:0] a;
        input[7:0] b;
        reg[7:0] p;
        reg[7:0] highBit;
        begin
            repeat (8) begin
                if ((b & 1) == 1) begin
                    p = p ^ a;
                end
                highBit = a & 8'h80;
                a = a << 1;
                if (highBit == 8'h80) begin
                    a = a ^ 8'h1b;
                end
                b = b >> 1;
            end
            galois = p % 256;
        end
    endfunction
    
    function mixColumn;
        input[7:0] state[15:0];
        input inv;
        reg[7:0] copy;
        begin
            //TO BE DONE
        end    
    endfunction
    
    function transform;
        input[7:0] state[15:0];
        input[7:0] roundKey;
        input inv;
        begin
            if (inv) begin
                //addKey(state, roundKey); Here be errors
            end
            else begin
            
            end
        end
    endfunction
//---------------------------------------------------------------